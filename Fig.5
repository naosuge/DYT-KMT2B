# GSE199836
# Lee S. et al. Epigenomics. 2022 May;14(9):537-547.doi: 10.2217/epi-2021-0521. Epub 2022 May 4.


R
## Sys.setenv("http_proxy"="http://proxy.l2.med.tohoku.ac.jp:8080")
## Sys.setenv("https_proxy"="http://proxy.l2.med.tohoku.ac.jp:8080")

library(RnBeads)
library(RnBeads.hg38)
library(GOstats)
library(simpleCache)
library(sva)

########################################################################
# 1. Setting up the analysis environment
########################################################################

rnb.options(
assembly = "hg38",
import.bed.style = "bismarkCov",
filtering.sex.chromosomes.removal = TRUE, 
identifiers.column = "Sample_ID"
)

data.dir <- "/path/to/cov.file/"
idat.dir <- file.path(data.dir, "idat")

sample.annotation <- file.path(data.dir, "sample_annotation.csv")

analysis.dir <- "/path/to/dir/"
report.dir <- file.path(analysis.dir, "reports")
rnb.initialize.reports(report.dir)

logger.start(fname = NA)


## 4.1 Data import
data.source <- c(idat.dir, sample.annotation)

result <- rnb.run.import(data.source=data.source, data.type="bs.bed.dir", dir.reports=report.dir)
rnb.set <- result$rnb.set
rnb.set

# Object of class RnBiseqSet
#       39 samples
# 23056898 methylation sites
# Region types:
# 	  578875 regions of type tiling
# 	   54610 regions of type genes
#	   59359 regions of type promoters
#	   27734 regions of type cpgislands
# Coverage information is present


## 4.2 Quality Control
rnb.run.qc(rnb.set, report.dir)


## 4.3 Preprocessing
rnb.set.unfiltered <- rnb.set
result <- rnb.run.preprocessing(rnb.set.unfiltered, dir.reports=report.dir)
rnb.set <- result$rnb.set
# over 80GB memory used
save(rnb.set, file = "rnb.set.rda")


## 5.3 Filtering instead of 4.3.1
rnb.set.filtered <- rnb.execute.sex.removal(rnb.set.unfiltered)$dataset
rnb.set.filtered <- rnb.execute.high.coverage.removal(rnb.set.filtered)$dataset
rnb.set.filtered <- rnb.execute.na.removal(rnb.set.filtered)$dataset
rnb.set.filtered <- rnb.execute.variability.removal(rnb.set.filtered, 0.005)$dataset


## 4.3.2 Normalization
rnb.set.norm <- rnb.execute.normalization(rnb.set.unfiltered, method="none", bgcorr.method="none")


## 4.4 Covariate Inference
rnb.options(inference=TRUE)
rnb.set <- rnb.run.inference(rnb.set, report.dir)$rnb.set


## 4.5.2 Clustering
clusterings.sites <- rnb.execute.clustering(rnb.set, region.type="sites")
clusterings.promoters <- rnb.execute.clustering(rnb.set, region.type="promoters")

X <- meth(rnb.set, type="promoters")[1:100, ]

cresult <- clusterings.promoters[[7]]@result
attr(cresult, "class") <- "hclust"
cresult <- as.dendrogram(cresult)

pdf(file="promoter_heatmap.pdf")
heatmap.2(X, Rowv=TRUE, Colv=NA, dendrogram="both",scale="none", trace="none")
dev.off()

heatmap.2(X, Rowv=TRUE, Colv=cresult, dendrogram="both",scale="none", trace="none")


## 4.6 Differential Methylation Analysis
cmp.cols <- "Sample_Group"
reg.types <- c("genes", "promoters")
diffmeth <- rnb.execute.computeDiffMeth(rnb.set, cmp.cols, region.types=reg.types)

str(diffmeth)
save(diffmeth, file = "diffmeth.rda")
#load("/home/naoto/Data/Bismark/3.1.cov/diffmeth.rda")


comparison <- get.comparisons(diffmeth)[1]
tab.sites <- get.table(diffmeth, comparison, "sites", return.data.frame=TRUE)
str(tab.sites)
tab.promoters <- get.table(diffmeth, comparison, "promoters",return.data.frame=TRUE)
str(tab.promoters)

dmrs <- get.table(diffmeth, comparison, "promoters")
pdf(file="scatter.pdf")
plot(dmrs[, "mean.mean.diff"], -log10(dmrs[, "comb.p.val"]),
xlab="mean difference", ylab="-log10(combined p-value)", col="blue")
dev.off()


## 4.6.2 Paired Analysis
# rnb.options("differential.comparison.columns"=c("diseaseState"),
# "columns.pairing"=c("diseaseState"="individual"))

rnb.options("differential.comparison.columns"=NULL,"columns.pairing"=NULL)

## 4.6.3 Adjusting for Covariates in the Dfferential Analysis
#rnb.options("covariate.adjustment.columns"=c("Passage_No"))
#diffmeth.adj <- rnb.execute.computeDiffMeth(rnb.set, cmp.cols,
#region.types=reg.types)


## 4.6.4 Enrichment Analysis of Differentially Methylated Regions
rnb.options("differential.enrichment.go"=TRUE)
enrich.go <- performGoEnrichment.diffMeth(rnb.set, diffmeth, verbose=TRUE)

enrich.table.go <- enrich.go[["region"]][[comparison]][["BP"]][["promoters"]][["rankCut_500"]][["hypo"]]
class(enrich.table.go)
summary(enrich.table.go)

table01 <- summary(enrich.table.go)
#
ggplot(table01[1:20,], aes(x=reorder(Term, -Pvalue), y=-log(Pvalue))) +
       geom_col(aes(fill=Pvalue)) +
       guides(fill = guide_legend(reverse = FALSE)) +
       coord_flip() +
       labs(title="GO analyses of Hypermethylated genes", x = NULL, y = "-log(p-value)", fill = "p-value") +
       theme_light() +
       theme(
       title=element_text(size =14),
       axis.text.x=element_text(size=10), axis.text.y=element_text(size=15),
       axis.title=element_text(size=14),
       legend.text=element_text(size =8)) +
       scale_fill_gradient(low = "deeppink3", high = "midnightblue") +
       geom_text(aes(label=OddsRatio), size = 3, color ="snow2", hjust = 1.2, vjust = 1) 
ggsave(file="GO_hyper.png")




enrich.table.go <- enrich.go[["region"]][[comparison]][["BP"]][["promoters"]][["rankCut_500"]][["hyper"]]
class(enrich.table.go)
summary(enrich.table.go)

# lola
lolaDest <- tempfile()
dir.create(lolaDest)
# lolaDirs <- downloadLolaDbs(lolaDest, dbs="LOLACore")
lolaDirs <- "/home/naoto/Data/LOLACore"

enrich.lola <- performLolaEnrichment.diffMeth(rnb.set, diffmeth, lolaDbPaths="/home/naoto/Data/LOLACore/hg38/")

enrich.table.lola <- enrich.lola$region[[comparison]][["promoters"]]
enrich.table.lola <- enrich.table.lola[enrich.table.lola$userSet=="rankCut_500_hyper",]
png("rankCut_500_hyper.png", width = 500, height = 350)
lolaBarPlot(enrich.lola$lolaDb, enrich.table.lola, scoreCol="oddsRatio", orderCol="maxRnk", pvalCut=0.05)
dev.off()

png("box_rankCut_500_hyper.png", width = 500, height = 350)
lolaBoxPlotPerTarget(enrich.lola$lolaDb, enrich.table.lola, scoreCol="pValueLog", orderCol="maxRnk", pvalCut=0.05)
dev.off()


#goto figure
enrich.table.lola <- enrich.lola$region[[comparison]][["promoters"]]
enrich.table.lola <- enrich.table.lola[enrich.table.lola$userSet=="rankCut_1000_hyper",]
png("rankCut_1000_hyper.png", width = 500, height = 350)
lolaBarPlot(enrich.lola$lolaDb, enrich.table.lola, scoreCol="oddsRatio", orderCol="maxRnk", pvalCut=0.05)
dev.off()

png("box_rankCut_1000_hyper.png", width = 500, height = 350)
lolaBoxPlotPerTarget(enrich.lola$lolaDb, enrich.table.lola, scoreCol="pValueLog", orderCol="maxRnk", pvalCut=0.05)
dev.off()

enrich.table.lola <- enrich.lola$region[[comparison]][["promoters"]]
enrich.table.lola <- enrich.table.lola[enrich.table.lola$userSet=="rankCut_500_hypo",]
png("rankCut_500_hypo.png", width = 500, height = 350)
lolaBarPlot(enrich.lola$lolaDb, enrich.table.lola, scoreCol="oddsRatio", orderCol="maxRnk", pvalCut=0.05)
dev.off()

enrich.table.lola <- enrich.lola$region[[comparison]][["promoters"]]
enrich.table.lola <- enrich.table.lola[enrich.table.lola$userSet=="rankCut_1000_hypo",]
png("rankCut_1000_hypo.png", width = 500, height = 350)
lolaBarPlot(enrich.lola$lolaDb, enrich.table.lola, scoreCol="oddsRatio", orderCol="maxRnk", pvalCut=0.05)
dev.off()


## 4.7 Tracks and Table
rnb.options(export.to.csv=TRUE)
rnb.run.tnt(rnb.set, report.dir)

########################################################################################




